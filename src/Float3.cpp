#include "float3.h"

//---------------------------------------------------------------------------------
//	コンストラクタ
//---------------------------------------------------------------------------------
float3::float3()
{
	x = 0.0f;
	y = 0.0f;
	z = 0.0f;
}
float3::float3(float x, float y, float z)
{
	this->x = x;
	this->y = y;
	this->z = z;
}
float3::float3(VECTOR v)
{
	x = v.x;
	y = v.y;
	z = v.z;
}
float3::float3(Vector3 v)
{
	x = v.x;
	y = v.y;
	z = v.z;
}
//---------------------------------------------------------------------------------
//	ゼロ初期化（ＸＹＺの値を０にします）
//---------------------------------------------------------------------------------
void float3::clear()
{
	x = 0.0f;
	y = 0.0f;
	z = 0.0f;
}
//---------------------------------------------------------------------------------
//	値のセット（ＸＹＺをそれぞれ受け取るバージョン）
//---------------------------------------------------------------------------------
void float3::set(float x, float y, float z)
{
	this->x = x;
	this->y = y;
	this->z = z;
}
//---------------------------------------------------------------------------------
//	値のセット（ float3 を受け取るバージョン ）
//---------------------------------------------------------------------------------
void float3::set(float3& v)
{
	x = v.x;
	y = v.y;
	z = v.z;
}
//---------------------------------------------------------------------------------
//	長さ取得
//---------------------------------------------------------------------------------
float float3::GetLength()
{
	return sqrtf(x * x + y * y + z * z);
}
//---------------------------------------------------------------------------------
//	正規化（ベクトルの長さを１にする）
//---------------------------------------------------------------------------------
void float3::normalize()
{
	float length = GetLength();
	if (length > 0.0f) {
		x = x / length;
		y = y / length;
		z = z / length;
	}
}
//---------------------------------------------------------------------------------
//	正規化されたベクトルの取得
//---------------------------------------------------------------------------------
float3 float3::normalized()
{
	float3 vec = *this;
	float length = vec.GetLength();
	if (length > 0.0f) {
		vec.x = vec.x / length;
		vec.y = vec.y / length;
		vec.z = vec.z / length;
	}
	return vec;
}
//---------------------------------------------------------------------------------
//	長さ設定
//---------------------------------------------------------------------------------
void float3::SetLength(float length)
{
	normalize();
	x = x * length;
	y = y * length;
	z = z * length;
}

//---------------------------------------------------------------------------------
//	= 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3& float3::operator = (const float3& v)
{
	x = v.x;
	y = v.y;
	z = v.z;
	return *this;
}
float3& float3::operator=(const VECTOR& v)
{

	x = v.x;
	y = v.y;
	z = v.z;
	return *this;
}
float3& float3::operator=(const Vector3& v)
{

	x = v.x;
	y = v.y;
	z = v.z;
	return *this;
}
//---------------------------------------------------------------------------------
//	+= 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3& float3::operator += (const float3& v)
{
	x += v.x;
	y += v.y;
	z += v.z;
	return *this;
}
//---------------------------------------------------------------------------------
//	-= 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3& float3::operator -= (const float3& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return *this;
}
//---------------------------------------------------------------------------------
//	*= 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3& float3::operator *= (const float f)
{
	x *= f;
	y *= f;
	z *= f;
	return *this;
}
//---------------------------------------------------------------------------------
//	/= 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3& float3::operator /= (const float f)
{
	x /= f;
	y /= f;
	z /= f;
	return *this;
}

//---------------------------------------------------------------------------------
//	+ 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3 operator + (const float3& v1, const float3& v2)
{
	float3 v;
	v.x = v1.x + v2.x;
	v.y = v1.y + v2.y;
	v.z = v1.z + v2.z;
	return v;
}
//---------------------------------------------------------------------------------
//	- 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3 operator - (const float3& v1, const float3& v2)
{
	float3 v;
	v.x = v1.x - v2.x;
	v.y = v1.y - v2.y;
	v.z = v1.z - v2.z;
	return v;
}
//---------------------------------------------------------------------------------
//	* 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3 operator * (const float3& v, const float f)
{
	float3 r;
	r.x = v.x * f;
	r.y = v.y * f;
	r.z = v.z * f;
	return r;
}
//---------------------------------------------------------------------------------
//	/ 演算子のオーバーロード
//---------------------------------------------------------------------------------
float3 operator / (const float3& v, const float f)
{
	float3 r;
	r.x = v.x / f;
	r.y = v.y / f;
	r.z = v.z / f;
	return r;
}


//---------------------------------------------------------------------------------
//	２つの float3 の距離を求める
//---------------------------------------------------------------------------------
float GetFloat3Distance(float3& pos1, float3& pos2)
{
	float3 v = pos1 - pos2;
	return v.GetLength();
}
//---------------------------------------------------------------------------------
//	２つの float3 の内積を求める
//---------------------------------------------------------------------------------
float GetFloat3Dot(float3& v1, float3& v2)
{
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}
//---------------------------------------------------------------------------------
//	２つの float3 の外積を求める
//---------------------------------------------------------------------------------
float3 GetFloat3Cross(float3& v1, float3& v2)
{
	float3 v;
	v.x = v1.y * v2.z - v1.z * v2.y;
	v.y = v1.z * v2.x - v1.x * v2.z;
	v.z = v1.x * v2.y - v1.y * v2.x;
	return v;
}
//---------------------------------------------------------------------------------
//	float3 を MATRIX で変換した float3 を返す
//---------------------------------------------------------------------------------
float3 GetFloat3VTransform(float3& v, MATRIX& mat)
{
	VECTOR base = v;
	VECTOR change = VTransform(base, mat);

	float3 ret(change);
	return ret;
}

float3 ProjectOnPlane(float3 vec, float3 plane_normal)
{
	plane_normal.normalize();
	if (plane_normal.GetLength() <= FLT_EPSILON)
		return float3();
	vec -= plane_normal * GetFloat3Dot(plane_normal, vec);
	return vec;
}
